c
fileds
c
fileds
c
fileds
c
ARGV[0]
klass
file
c
field.is_a? ::Array
field
c
k
c
@var.each {|k| k.each { |k,v| p  } }
@var.each {|k| p k.each { |k,v| p k } }
@var.each {|k,v| p k }
@var
file_data.each { |var| @var << {var.split(' ')[0] => var.split(' ')[1]} }
@var = []
file_data.each { |var| @var << {var.split(' ')[0] => var.split(' ')[1]} }
@var.each {|k,v| p k }
@var
file_data.each { |var| @var << {var.split(' ')[0] => var.split(' ')[0]} }
@var = []
file_data.each { |var| @var << {var.split(' ')[0] => var.split(' ')[0]} }
@var
file_data.each { |var| @var[var.split(' ')[0]] = var.split(' ')[0] }
@var = {}
@var
file_data.each { |var| @var << var.split(' ')[0] }
@var = []
@var
file_data.each { |var| @var << var.split(' ')[0] }
file_data = IO.readlines("../log/#{file[0]}")
file
c
file_data.uniq.count
file_data.uniq
file_data.count
file_data.count\
file_data
@result.uniq.count
@result.uniq
@result.count
@result
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count }
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count if @result.include?(v.count)}
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count if @result.include?(v)}
@result
file_data.group_by{|i| i}.map{|k,v| @result[k] = 1 }
@result
file_data.group_by{|i| i}.map{|k,v| @result[k.split(' ')[0]] = 1 }
file_data.group_by{|i| i}.map{|k,v| @result[k.split(' ')[0]] = v + 1 }
@result
file_data.group_by{|i| i}.map{|k,v| @result[k.split(' ')[0]] = v.count }
@result
file_data.group_by{|i| i}.map{|k,v| @result[k.split(' ')[0]] = 1 }
@result = {}
@result
file_data.group_by{|i| i}.map{|k,v| @result[k.split(' ')[0]] = 1 }
@result
file_data.group_by{|i| i}.map{|k,v| @result[k] = 1 }
@result
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count }
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count }.count
file_data.group_by{|i| i}.map{|k,v| @result[k] = v.count }
c
@res.sort_by {|k,v| v}
@res
file_data.group_by{|i| i}.map{ |k,v| @res[k] = v.count }
file_data.uniq.group_by{|i| i}.map{ |k,v| @res[k] = v.count }
@res= {}
file_data.uniq.group_by{|i| i}.map{ |k,v| @res[k] = v.count }
file_data.uniq.gorup_by{|i| i}.map{ |k,v| @res[k] = v.count }
file_data.uniq.gorup_by
file_data.uniq {|v| p v }
file_data.uniq {|v| p v.count}
file_data.uniq {|v| p "#{v} #{v.count}"}
file_data.uniq {|v| p "#{v} == #{v.count}"}
file_data.uniq {|v| p v.size}
file_data.uniq {|v| v.size}
file_data.uniq
file_data.uniq.map{|k,v| p "#{k} -- #{v}"}
file_data.uniq.map {}
file_data.uniq.group_by{|i|  i}.map{|k,v| p "#{k} -- #{v}"}
file_data.uniq.group_by{|i|  i}
file_data.uniq.group_by{|i| p i.size}
file_data.count
file_data.uniq.count
file_data.uniq
file_data
file_dataq
c
file_dataq
continue
file_data.uniq {|v| p v.size }
file_data.uniq {|v| p v.count }
file_data.uniq {|v| p v}
file_data
file_data = IO.readlines("../log/#{file[0]}")
c
@result.sort {|k, v| v[1] <=> k[1] }
@result.sort {|k, v| v[1] <=> v[k] }
c
@result.sort_by {|k, v| v }.reverse
c
@result.sort_by {|k, v| v }.reverse
@result.sort_by {|k, v| k }
@result.sort_by {|k, v| v }
@result.sort {|k, v| v[1] <=> k[1]}
@result.sort {|k, v| k[1] <=> v[1]}
@result.sort
c
@result
@var.group_by{|i| i}.map{|k,v| @result[k] = v.count }
@var.group_by{|i| i}.map{|k,v| [k, v.count] }
@var.group_by(&:i).map{|k,v| [k, v.count] }
@var.group_by{|i| i.map{|k,v| [k, v.count] }
@var.group_by{|i| i}.map{|k,v| [k, v.count] }
@var.group_by{|i| i} #.map{|k,v| [k, v.count] }
@var.group_by{|i| i}.map{|k,v| [k, v.count] }
@var.each { |v| p @result[v] = @result[v] + 1 }
@result
@var.each { |v| p @result[v] = @result[v] + 1 unless @result[v].nil? }
@var.each { |v| p @result[v] = @result[v] + 1 }
@result = {}
@result
@result = {1}
@var.each { |v| p @result[v] = @result[v.size] }
@var.each { |v| p @result[v] = @result[v.size + 1] }
@var.each { |v| p @result[v] = @result[v.size] + 1 }
@var.each { |v| p @result[v] = v.size + 1 }
@var.each { |v| p @result[v] = v + 1 }
@var.each { |v| p @result[v] = 's' }
@var.each { |v| p @result.store(v, @result[v] + 1) }
@result
@var.each { |v| p @result[v] }
@var.each { |v| p v }
@result
@var.each { |v| @result[v] = @result[v] + 1 }
@var
@var.each { |v| @result[v] = @result[v] + 1 }
@var.each { |v| @result[v] = @result[1] + 1 }
@var.each { |v| @result[v] = @result[v].size + 1 }
@var.each { |v| @result[v] = @result[v] + 1 }
@var.each { |v| @result[v] = @result + 1 }
@var.each { |v| @result[v] = @result[v.size] + 1 }
@var.each { |v| @result[v] = @result[v] + 1 }
@result
@var
c
log_input_parser(@log_file).each { |v| @vare[v] = @vare[v] + 1 }
@vare
log_input_parser(@log_file).each { |v| @vare[v] = @vare[v] + 1 }
log_input_parser(@log_file).each { |v| @vare[v] = @vare[v].size + 1 }
@vare
log_input_parser(@log_file).each { |v| @vare[v] = @vare[v].size + 1 }
@vare
log_input_parser(@log_file).each { |v| @vare[v] = @vare[v].size + 1 }
log_input_parser(@log_file).each { |v| @vare[v] = v.count + 1 }
@vare
log_input_parser(@log_file).each { |v| @vare[v] = v.size + 1 }
@vare = {}
@vare
log_input_parser(@log_file).each { |v| @vare[v] = v.size + 1 }
log_input_parser(@log_file).each { |v| @vare[v] = v + 1 }
@vare
log_input_parser(@log_file).each { |v| @vare[v] = v }
log_input_parser(@log_file).each { |v| @vare += {v => v} }
log_input_parser(@log_file).each { |v| @vare.store(v, v + 1) }
@vare
log_input_parser(@log_file).each { |v| @vare.store(v, v + 1) }
log_input_parser(@log_file).each { |v| p @vare[v]  }
log_input_parser(@log_file).each { |v| p @vare[v]) }
log_input_parser(@log_file).each { |v| @vare.store(v, @vare[v] + 1) }
log_input_parser(@log_file).each { |v| p v }
log_input_parser(@log_file).each { |v| p v) }
log_input_parser(@log_file).each { |v| @vare.store(v, @vare[v] + 1) }
@vare = {}
@vare
log_input_parser(@log_file).each { |v| @vare.store(v, @vare[v] + 1) }
log_input_parser(@log_file).each { |v| p @vare[v] }
@vare = {}
@var
log_input_parser(@log_file).each { |v| p @var[v] }
@var = {}
@var
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1.to_s) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v].to_i + 1) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
@var = {}
@var
log_input_parser(@log_file).each { |v| @var.store(v, "ds") }
@var = {}
@var
log_input_parser(@log_file).each { |v| @var.store(v, "ds") }
log_input_parser(@log_file).each { |v| @var.store(v, @var) }
log_input_parser(@log_file).each { |v| @var.store(v) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v]) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v].size + 1) }
log_input_parser(@log_file).each { |v| v.store(v, @var[v] + 1) }
@var = {}
log_input_parser(@log_file).each { |v| v.size }
log_input_parser(@log_file).uniq { |v| p v.size }
log_input_parser(@log_file).uniq { |v| p v }
log_input_parser(@log_file).uniq { |v| p v.count }
log_input_parser(@log_file).uniq {|v| p v.count }
log_input_parser(@log_file).uniq {|v| v.count }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
@var
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
@var = Hash.new(0)
@var
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).group_by(&:data) #.each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).group_by(:data) #.each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).group_by #.each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).uniq #.each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file) #.each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
@var = Hash.new(0)
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
log_input_parser(@log_file).each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
@var = Hash.new(0)
log_input_parser(@log_file).each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
log_input_parser(@log_file) #.each { |var| p var.split(' ')[0] } #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
c
log_input_parser(@log_file).each { |var| p var.split(' ')[0] } #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
log_input_parser(@log_file).each { |var| p var.first } #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
log_input_parser(@log_file).each { |var| p var.split(' ')[0]} #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
log_input_parser(@log_file).each { |var| var.split(' ')[0]} #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
log_input_parser(@log_file) #.each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
@var
log_input_parser(@log_file).each { |v| @var.store(v, @var[v.split(' ')[0]] + 1) }
@var
log_input_parser(@log_file).each { |v| @var.store(v, @var[v] + 1) }
@var = Hash.new(0)
@var
log_input_parser(@log_file).each_with_object(Hash.new(0)) { |word,counts| @var << counts[word] += 1 }
@var
log_input_parser(@log_file).each_with_object(Hash.new(0)) { |word,counts| @var << counts[word] += 1 }
@var
log_input_parser(@log_file).each_with_object(Hash.new(0)) { |word,counts| @var = counts[word] += 1 }
log_input_parser(@log_file).each_with_object(Hash.new(0)) { |word,counts| p counts[word] += 1 }
counts
log_input_parser(@log_file).each_with_object(Hash.new(0)) { |word,counts| counts[word] += 1 }
@b
log_input_parser(@log_file).each { |v| p @b[v] + 1 }
log_input_parser(@log_file).each { |v| Hash[v] + 1 }
log_input_parser(@log_file).each { |v| Hash.ne(0)[v] + 1 }
log_input_parser(@log_file).each { |v| Hash.ne(0)w[v] + 1 }
log_input_parser(@log_file).each { |v| Hash.new[v] + 1 }
